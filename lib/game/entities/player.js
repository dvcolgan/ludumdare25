// Generated by CoffeeScript 1.3.3
(function() {

  ig.module('game.entities.player').requires('impact.entity').defines(function() {
    return window.EntityPlayer = ig.Entity.extend({
      name: 'player',
      state: 'idle',
      size: {
        x: 10,
        y: 28
      },
      offset: {
        x: 2,
        y: 4
      },
      friction: {
        x: 400,
        y: 0
      },
      collides: ig.Entity.COLLIDES.PASSIVE,
      animSheet: new ig.AnimationSheet('media/player/player.png', 16, 32),
      checkAgainst: ig.Entity.TYPE.B,
      flip: false,
      maxVel: {
        x: 200,
        y: 600
      },
      runAccel: 300,
      jumpAccel: 250,
      touchingWall: 'none',
      init: function(x, y, settings) {
        this.addAnim('idle', 0.2, [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0]);
        this.addAnim('running', 0.1, [3, 4, 5, 6, 5, 4]);
        this.addAnim('jumping', 0.2, [7]);
        this.addAnim('falling', 0.2, [8]);
        this.addAnim('armjump', 0.05, [8, 9, 10, 9, 7], true);
        this.addAnim('rolling', 0.1, [11, 12, 13, 14, 15, 16]);
        this.addAnim('panting', 0.3, [0, 17, 0, 17, 0, 17, 0, 17, 0, 0, 0, 0], true);
        return this.parent(x, y, settings);
      },
      check: function(entity) {
        if (entity.name === 'bell') {
          entity.ring();
          this.state = 'panting';
          this.anims.panting.rewind();
          return this.currentAnim = this.anims.panting;
        }
      },
      draw: function() {
        return this.parent();
      },
      handleMovementTrace: function(res) {
        if (res.tile.x !== 0 && this.vel.x !== 0 && this.wallJumpXVel === 0) {
          this.wallJumpXVel = this.vel.x;
        }
        this.parent(res);
        if (res.tile.x === -1) {
          return this.touchingWall = 'left';
        } else if (res.tile.x === 1) {
          return this.touchingWall = 'right';
        } else {
          return this.touchingWall = 'none';
        }
      },
      update: function() {
        if (this.state === 'idle') {
          if (this.standing && ig.input.state('jump')) {
            this.state = 'jumping';
            this.anims.jumping.rewind();
            this.currentAnim = this.anims.jumping;
            this.vel.y -= this.jumpAccel;
          } else if (ig.input.state('left') || ig.input.state('right')) {
            this.state = 'running';
            this.anims.running.rewind();
            this.currentAnim = this.anims.running;
          }
        } else if (this.state === 'running') {
          this.currentAnim.frameTime = 0.3 - Math.abs(this.vel.x / this.maxVel.x) * 0.18;
          if (ig.input.state('down')) {
            this.state = 'rolling';
            this.anims.rolling.rewind();
            this.currentAnim = this.anims.rolling;
          } else if (ig.input.state('jump')) {
            this.state = 'jumping';
            this.anims.jumping.rewind();
            this.currentAnim = this.anims.jumping;
            this.vel.y -= this.jumpAccel;
          } else if (ig.input.state('left') || ig.input.state('right')) {
            if (ig.input.state('left') && !ig.input.state('right')) {
              if (this.vel.x > 0) {
                this.vel.x *= 0.7;
              }
              this.accel.x = -this.runAccel;
            } else if (ig.input.state('right') && !ig.input.state('left')) {
              if (this.vel.x < 0) {
                this.vel.x *= 0.7;
              }
              this.accel.x = this.runAccel;
            }
          } else {
            this.accel.x = 0;
            if (this.vel.x === 0) {
              this.state = 'idle';
              this.anims.idle.rewind();
              this.currentAnim = this.anims.idle;
            }
          }
        } else if (this.state === 'jumping') {
          if (this.vel.y > 0) {
            this.state = 'falling';
            this.anims.falling.rewind();
            this.currentAnim = this.anims.falling;
          } else if (!ig.input.state('jump')) {
            this.vel.y *= 0.7;
          }
          if (ig.input.pressed('jump') && (this.touchingWall === 'left' && ig.input.state('left')) || (this.touchingWall === 'right' && ig.input.state('right'))) {
            this.vel.y -= Math.abs(this.wallJumpXVel);
            this.anims.jumping.rewind();
          }
          if (ig.input.state('left') && !ig.input.state('right')) {
            this.accel.x -= this.runAccel * 0.1;
          } else if (ig.input.state('right') && !ig.input.state('left')) {
            this.accel.x += this.runAccel * 0.1;
          }
        } else if (this.state === 'falling') {
          if (ig.input.pressed('jump') && (this.touchingWall === 'left' && ig.input.state('left')) || (this.touchingWall === 'right' && ig.input.state('right'))) {
            this.vel.y -= Math.abs(this.wallJumpXVel);
            this.state = 'jumping';
            this.anims.jumping.rewind();
            this.currentAnim = this.anims.jumping;
          }
          if (ig.input.state('down')) {
            this.state = 'rolling';
            this.anims.rolling.rewind();
            this.currentAnim = this.anims.rolling;
          } else if (ig.input.state('up') && this.vel.x !== 0) {
            this.state = 'armjump';
            this.anims.armjump.rewind();
            this.currentAnim = this.anims.armjump;
          } else if (this.standing) {
            if (this.vel.x = 0) {
              this.state = 'idle';
              this.anims.idle.rewind();
              this.currentAnim = this.anims.idle;
            } else {
              this.state = 'running';
              this.anims.running.rewind();
              this.currentAnim = this.anims.running;
            }
          }
        } else if (this.state === 'armjump') {
          if (ig.input.state('up') && this.currentAnim.frame === 2) {
            this.currentAnim.pause();
          } else {
            this.currentAnim.unpause();
          }
          if (this.currentAnim.frame === 2) {
            this.size = {
              x: 10,
              y: 12
            };
            this.offset = {
              x: 2,
              y: 4
            };
          } else {
            this.size = {
              x: 10,
              y: 28
            };
            this.offset = {
              x: 2,
              y: 4
            };
          }
          if (ig.input.state('left') && !ig.input.state('right')) {
            this.accel.x -= this.runAccel * 0.1;
          } else if (ig.input.state('right') && !ig.input.state('left')) {
            this.accel.x += this.runAccel * 0.1;
          }
          if (!ig.input.state('up') && this.currentAnim.frame >= 4) {
            if (this.vel.y > 0) {
              this.state = 'falling';
              this.anims.falling.rewind();
              this.currentAnim = this.anims.falling;
            } else if (this.vel.y < 0) {
              this.state = 'jumping';
              this.anims.jumping.rewind();
              this.currentAnim = this.anims.jumping;
            }
          } else {
            if (this.currentAnim.frame > 0 && this.standing) {
              this.vel.y -= this.jumpAccel / 2;
            }
          }
        } else if (this.state === 'rolling') {
          if (!this.standing) {
            if (ig.input.state('down')) {
              this.currentAnim.gotoFrame(0);
              this.currentAnim.pause();
            } else {
              this.state = 'falling';
              this.anims.falling.rewind();
              this.currentAnim = this.anims.falling;
            }
          } else {
            this.currentAnim.unpause();
            if (ig.input.state('down') && this.currentAnim.frame === this.currentAnim.numFrames() - 1) {
              this.currentAnim.gotoFrame(2);
            } else if (this.currentAnim.frame === this.currentAnim.numFrames() - 1) {
              if (this.standing) {
                this.state = 'running';
                this.anims.running.rewind();
                this.currentAnim = this.anims.running;
              } else {
                this.state = 'falling';
                this.anims.falling.rewind();
                this.currentAnim = this.anims.falling;
              }
            }
          }
        } else if (this.state === 'panting') {
          this.accel.x = this.vel.x = 0;
          if (this.currentAnim.loopCount > 0) {
            this.state = 'idle';
            this.anims.idle.rewind();
            this.currentAnim = this.anims.idle;
            ig.game.nextLevel();
          }
        }
        if (this.standing) {
          this.friction.x = 400;
        } else {
          this.friction.x = 50;
        }
        if (this.vel.x > 0) {
          this.flip = false;
        }
        if (this.vel.x < 0) {
          this.flip = true;
        }
        this.currentAnim.flip.x = this.flip;
        if (this.pos.x < 0) {
          this.pos.x = 0;
          this.accel.x = this.vel.x = 0;
        }
        if (this.standing || ig.input.pressed('jump')) {
          this.wallJumpXVel = 0;
        }
        return this.parent();
      }
    });
  });

}).call(this);
