// Generated by CoffeeScript 1.3.3
(function() {

  ig.module('game.entities.player').requires('impact.entity').defines(function() {
    window.EntityPlayer = ig.Entity.extend({
      name: 'player',
      state: 'idle',
      size: {
        x: 10,
        y: 28
      },
      offset: {
        x: 2,
        y: 4
      },
      friction: {
        x: 400,
        y: 0
      },
      collides: ig.Entity.COLLIDES.PASSIVE,
      animSheet: new ig.AnimationSheet('media/player/player.png', 16, 32),
      checkAgainst: ig.Entity.TYPE.B,
      flip: false,
      maxVel: {
        x: 200,
        y: 600
      },
      runAccel: 300,
      jumpAccel: 250,
      touchingWall: 'none',
      resurrectCount: 0,
      xDeathThreshold: 300,
      yDeathThreshold: 350,
      init: function(x, y, settings) {
        this.addAnim('idle', 0.2, [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0]);
        this.addAnim('running', 0.1, [3, 4, 5, 6, 5, 4]);
        this.addAnim('jumping', 0.2, [7]);
        this.addAnim('falling', 0.2, [8]);
        this.addAnim('armjump', 0.05, [8, 9, 10, 9, 7], true);
        this.addAnim('rolling', 0.1, [11, 12, 13, 14, 15, 16]);
        this.addAnim('panting', 0.3, [0, 17, 0, 17, 0, 17, 0, 17, 0, 0, 0, 0], true);
        this.addAnim('dead', 0.1, [18, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 20, 19, 19, 19, 19, 19, 19, 19, 20, 19, 19, 19]);
        this.addAnim('resurrecting', 0.3, [17, 17, 17, 17, 17, 0]);
        return this.parent(x, y, settings);
      },
      check: function(entity) {
        if (entity.name === 'bell') {
          entity.ring();
          this.state = 'panting';
          this.anims.panting.rewind();
          return this.currentAnim = this.anims.panting;
        }
      },
      draw: function() {
        var x, y;
        this.parent();
        if (this.state === 'dead' && ig.input.pressed('jump')) {
          x = Math.floor(Math.random() * (ig.system.width - 80 - 80 + 1)) + 80;
          y = Math.floor(Math.random() * (ig.system.width - 80 - 80 + 1)) + 80;
          ig.game.spawnEntity(window.EntityInsult, x, y);
          return this.resurrectCount += 1;
        }
      },
      spawnDeathParticles: function() {
        var i, _i, _results;
        _results = [];
        for (i = _i = 0; _i <= 10; i = ++_i) {
          _results.push(ig.game.spawnEntity(window.EntityDeathParticle, this.pos.x + this.size.x / 2, this.pos.y + this.size.y));
        }
        return _results;
      },
      spawnDustParticles: function() {
        var i, _i, _results;
        _results = [];
        for (i = _i = 0; _i <= 2; i = ++_i) {
          _results.push(ig.game.spawnEntity(window.EntityDustParticle, this.pos.x + this.size.x / 2, this.pos.y + this.size.y));
        }
        return _results;
      },
      handleMovementTrace: function(res) {
        if (res.tile.x > 0.1 || res.tile.x < -0.1) {
          if (this.vel.x > this.xDeathThreshold) {
            this.state = 'dead';
            this.anims.dead.rewind();
            this.currentAnim = this.anims.dead;
            this.resurrectCount = 0;
            this.spawnDeathParticles();
          }
        }
        if (res.tile.y > 0.1 || res.tile.y < -0.1) {
          if (this.vel.y > this.yDeathThreshold) {
            this.state = 'dead';
            this.anims.dead.rewind();
            this.currentAnim = this.anims.dead;
            this.resurrectCount = 0;
            this.spawnDeathParticles();
          }
        }
        if (res.tile.x !== 0 && this.vel.x !== 0 && this.wallJumpXVel === 0) {
          this.wallJumpXVel = this.vel.x;
        }
        this.parent(res);
        if (res.tile.x === -1) {
          return this.touchingWall = 'left';
        } else if (res.tile.x === 1) {
          return this.touchingWall = 'right';
        } else {
          return this.touchingWall = 'none';
        }
      },
      stateChange: function(state) {
        this.state = state;
        this.anims[state].rewind();
        return this.currentAnim = this.anims[state];
      },
      update: function() {
        if (this.state === 'idle') {
          if (this.standing && ig.input.state('jump')) {
            this.stateChange('jumping');
            this.vel.y -= this.jumpAccel;
          } else if (ig.input.state('left') || ig.input.state('right')) {
            this.stateChange('running');
          }
        } else if (this.state === 'running') {
          this.spawnDustParticles();
          this.currentAnim.frameTime = 0.3 - Math.abs(this.vel.x / this.maxVel.x) * 0.18;
          if (ig.input.state('down')) {
            this.stateChange('rolling');
          } else if (ig.input.state('jump')) {
            this.stateChange('jumping');
            this.vel.y -= this.jumpAccel;
          } else if (ig.input.state('left') || ig.input.state('right')) {
            if (ig.input.state('left') && !ig.input.state('right')) {
              if (this.vel.x > 0) {
                this.vel.x *= 0.7;
              }
              this.accel.x = -this.runAccel;
            } else if (ig.input.state('right') && !ig.input.state('left')) {
              if (this.vel.x < 0) {
                this.vel.x *= 0.7;
              }
              this.accel.x = this.runAccel;
            }
          } else {
            this.accel.x = 0;
            if (this.vel.x === 0) {
              this.stateChange('idle');
            }
          }
        } else if (this.state === 'jumping') {
          if (this.vel.y > 0) {
            this.stateChange('falling');
          } else if (!ig.input.state('jump')) {
            this.vel.y *= 0.7;
          }
          if (ig.input.pressed('jump') && (this.touchingWall === 'left' && ig.input.state('left')) || (this.touchingWall === 'right' && ig.input.state('right'))) {
            this.vel.y -= Math.abs(this.wallJumpXVel);
            this.anims.jumping.rewind();
          }
          if (ig.input.state('left') && !ig.input.state('right')) {
            this.accel.x -= this.runAccel * 0.1;
          } else if (ig.input.state('right') && !ig.input.state('left')) {
            this.accel.x += this.runAccel * 0.1;
          }
        } else if (this.state === 'falling') {
          if (ig.input.pressed('jump') && (this.touchingWall === 'left' && ig.input.state('left')) || (this.touchingWall === 'right' && ig.input.state('right'))) {
            this.vel.y -= Math.abs(this.wallJumpXVel);
            this.stateChange('jumping');
          }
          if (ig.input.state('down')) {
            this.stateChange('rolling');
          } else if (ig.input.state('up') && this.vel.x !== 0) {
            this.stateChange('armjump');
          } else if (this.standing) {
            if (this.vel.x = 0) {
              this.stateChange('idle');
            } else {
              this.stateChange('running');
            }
          }
        } else if (this.state === 'armjump') {
          if (ig.input.state('up') && this.currentAnim.frame === 2) {
            this.currentAnim.pause();
          } else {
            this.currentAnim.unpause();
          }
          if (this.currentAnim.frame === 2) {
            this.size = {
              x: 10,
              y: 12
            };
            this.offset = {
              x: 2,
              y: 4
            };
          } else {
            this.size = {
              x: 10,
              y: 28
            };
            this.offset = {
              x: 2,
              y: 4
            };
          }
          if (ig.input.state('left') && !ig.input.state('right')) {
            this.accel.x -= this.runAccel * 0.1;
          } else if (ig.input.state('right') && !ig.input.state('left')) {
            this.accel.x += this.runAccel * 0.1;
          }
          if (!ig.input.state('up') && this.currentAnim.frame >= 4) {
            if (this.vel.y > 0) {
              this.stateChange('falling');
            } else if (this.vel.y < 0) {
              this.stateChange('jumping');
            }
          } else {
            if (this.currentAnim.frame > 0 && this.standing) {
              this.vel.y -= this.jumpAccel / 2;
            }
          }
        } else if (this.state === 'rolling') {
          if (!this.standing) {
            if (ig.input.state('down')) {
              this.currentAnim.gotoFrame(0);
              this.currentAnim.pause();
            } else {
              this.stateChange('falling');
            }
          } else {
            this.currentAnim.unpause();
            if (ig.input.state('down') && this.currentAnim.frame === this.currentAnim.numFrames() - 1) {
              this.currentAnim.gotoFrame(2);
            } else if (this.currentAnim.frame === this.currentAnim.numFrames() - 1) {
              if (this.standing) {
                this.stateChange('running');
              } else {
                this.stateChange('falling');
              }
            }
          }
        } else if (this.state === 'dead') {
          if (this.currentAnim.frame >= this.currentAnim.numFrames() - 1) {
            this.currentAnim.gotoFrame(1);
          }
          this.accel.x = this.vel.x = 0;
          if (this.resurrectCount >= 7) {
            this.stateChange('resurrecting');
          }
        } else if (this.state === 'resurrecting') {
          if (this.currentAnim.frame >= this.currentAnim.numFrames() - 1) {
            this.stateChange('idle');
          }
        } else if (this.state === 'panting') {
          this.accel.x = this.vel.x = 0;
          if (this.currentAnim.loopCount > 0) {
            this.stateChange('idle');
            ig.game.nextLevel();
          }
        }
        if (this.standing) {
          this.friction.x = 400;
        } else {
          this.friction.x = 50;
        }
        if (this.vel.x > 0) {
          this.flip = false;
        }
        if (this.vel.x < 0) {
          this.flip = true;
        }
        this.currentAnim.flip.x = this.flip;
        if (this.pos.x < 0) {
          this.pos.x = 0;
          this.accel.x = this.vel.x = 0;
        }
        if (this.standing || ig.input.pressed('jump')) {
          this.wallJumpXVel = 0;
        }
        return this.parent();
      }
    });
    window.EntityParticle = ig.Entity.extend({
      size: {
        x: 1,
        y: 1
      },
      offset: {
        x: 0,
        y: 0
      },
      type: ig.Entity.TYPE.NONE,
      checkAgainst: ig.Entity.TYPE.NONE,
      collides: ig.Entity.COLLIDES.LITE,
      lifetime: 5,
      fadetime: 1,
      maxVel: {
        x: 3000,
        y: 3000
      },
      init: function(x, y, settings) {
        this.parent(x, y, settings);
        return this.idleTimer = new ig.Timer();
      },
      update: function() {
        if (this.idleTimer.delta() > this.lifetime) {
          this.kill();
          return;
        }
        this.currentAnim.alpha = this.idleTimer.delta().map(this.lifetime - this.fadetime, this.lifetime, 1, 0);
        return this.parent();
      }
    });
    window.EntityInsult = ig.Entity.extend({
      type: ig.Entity.TYPE.NONE,
      checkAgainst: ig.Entity.TYPE.NONE,
      collides: ig.Entity.COLLIDES.NEVER,
      gravityFactor: 0,
      lifetime: 1,
      fadetime: 1,
      insults: ['Wake up you!', 'I know you\'re in there!', 'Think of how sad everyone\'ll be!', 'You can\'t quit now!', 'We just got started!', 'Everyone\'s counting on you!'],
      init: function(x, y, settings) {
        this.parent(x, y, settings);
        this.insult = this.insults.random();
        this.idleTimer = new ig.Timer();
        this.vel.x = -10 + Math.random() * 20;
        return this.vel.y = -10 + Math.random() * 20;
      },
      draw: function() {
        ig.game.font.alpha = this.idleTimer.delta().map(this.lifetime - this.fadetime, this.lifetime, 1, 0);
        ig.game.font.draw(this.insult, this.pos.x, this.pos.y, ig.Font.ALIGN.CENTER);
        ig.game.font.alpha = 1;
        return this.parent();
      },
      update: function() {
        if (this.idleTimer.delta() > this.lifetime) {
          this.kill();
          return;
        }
        return this.parent();
      }
    });
    window.EntityDustParticle = window.EntityParticle.extend({
      lifetime: 1.0,
      fadetime: 2.0,
      gravityFactor: 0,
      friction: {
        x: 40,
        y: 40
      },
      animSheet: new ig.AnimationSheet('media/dust-particles.png', 4, 4),
      init: function(x, y, settings) {
        this.addAnim('idle', 1.0, [[0, 1, 2, 3, 4, 5, 6, 7, 8, 9].random()]);
        this.currentAnim.gotoRandomFrame();
        return this.parent(x, y, settings);
      },
      update: function() {
        this.vel.y = -4;
        return this.parent();
      }
    });
    return window.EntityDeathParticle = window.EntityParticle.extend({
      lifetime: 10.0,
      fadetime: 0.5,
      friction: {
        x: 40,
        y: 40
      },
      bounciness: Math.random() * 0.25 + 0.25,
      animSheet: new ig.AnimationSheet('media/death-particles.png', 2, 2),
      init: function(x, y, settings) {
        this.addAnim('idle', 1.0, [[0, 1, 2, 3, 4, 5, 6, 7, 8, 9].random()]);
        this.currentAnim.gotoRandomFrame();
        this.vel.y = -100 + Math.random() * 50;
        this.vel.x = -100 + Math.random() * 200;
        return this.parent(x, y, settings);
      },
      update: function() {
        return this.parent();
      }
    });
  });

}).call(this);
