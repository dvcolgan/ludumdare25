// Generated by CoffeeScript 1.3.3
(function() {

  ig.module('game.main').requires('game.entities.player', 'impact.entity', 'impact.game', 'impact.font', 'game.levels.level1').defines(function() {
    window.sounds = {};
    window.LD25Game = ig.Game.extend({
      font: new ig.Font('media/04b03.font.png'),
      clearColor: '#7fffff',
      gravity: 600,
      paused: false,
      init: function() {
        ig.input.bind(ig.KEY.LEFT_ARROW, 'left');
        ig.input.bind(ig.KEY.RIGHT_ARROW, 'right');
        ig.input.bind(ig.KEY.UP_ARROW, 'up');
        ig.input.bind(ig.KEY.DOWN_ARROW, 'down');
        ig.input.bind(ig.KEY.SPACE, 'jump');
        ig.input.bind(ig.KEY.ENTER, 'pause');
        this.loadLevel(LevelLevel1);
        return this.player = ig.game.getEntityByName('player');
      },
      update: function() {
        var colMap, levelHeight, levelWidth;
        if (ig.input.pressed('pause')) {
          if (!this.paused) {
            this.paused = true;
            return;
          } else {
            this.paused = false;
          }
        }
        if (this.paused) {
          return;
        }
        this.parent();
        if (this.player) {
          this.screen.x = this.player.pos.x - ig.system.width / 8 * 3;
          this.screen.y = this.player.pos.y - ig.system.height / 2;
          if (this.screen.x < 0) {
            this.screen.x = 0;
          }
          if (this.screen.y < 0) {
            this.screen.y = 0;
          }
          colMap = ig.game.collisionMap;
          levelWidth = colMap.width * colMap.tilesize;
          levelHeight = colMap.height * colMap.tilesize;
          if (this.screen.x > levelWidth - ig.system.width) {
            this.screen.x = levelWidth - ig.system.width;
          }
          if (this.screen.y > levelHeight - ig.system.height) {
            return this.screen.y = levelHeight - ig.system.height;
          }
        }
      },
      draw: function() {
        this.parent();
        this.font.draw("State: " + this.player.state, 10, 10);
        this.font.draw("xvel: " + this.player.vel.x, 10, 30);
        return this.font.draw("frameTime: " + this.player.currentAnim.frameTime, 10, 40);
      }
    });
    if (!ig.global.wm) {
      return soundManager.setup({
        url: 'lib/soundmanager/swf/',
        onready: function() {
          window.sounds = {
            'sound': soundManager.createSound({
              id: 'sound',
              url: 'media/sound.wav'
            })
          };
          return ig.main('#canvas', window.LD25Game, 60, 256, 240, 2);
        },
        ontimeout: function() {
          return alert('Could not start Soundmanager.  Is Flash blocked?');
        }
      });
    } else {
      return ig.main('#canvas', window.LD25Game, 60, 256, 240, 2);
    }
  });

}).call(this);
