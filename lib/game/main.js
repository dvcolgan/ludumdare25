// Generated by CoffeeScript 1.3.3
(function() {

  ig.module('game.main').requires('game.entities.player', 'impact.entity', 'impact.game', 'impact.font', 'game.levels.plains', 'game.levels.villiage', 'game.levels.castle', 'game.levels.example').defines(function() {
    window.FullsizeBackdrop = ig.Image.extend({
      resize: function() {
        return null;
      },
      draw: function() {
        if (!this.loaded) {
          return;
        }
        return ig.system.context.drawImage(this.data, 0, 0);
      }
    });
    window.LD25Game = ig.Game.extend({
      font: new ig.Font('media/04b03.font.png'),
      gravity: 600,
      paused: false,
      clearColor: null,
      state: 'title',
      titleImage: new ig.Image('media/box-cover.png'),
      farthestBackground: new ig.Image('media/farthest-background.png'),
      farBackground: new ig.Image('media/far-background.png'),
      nearBackground: new ig.Image('media/near-background.png'),
      armies: new ig.Image('media/advancing-army.png'),
      slideWin: new window.FullsizeBackdrop('media/win.png'),
      slideWinTimer: new ig.Timer(),
      slidesIntro: [new ig.Image('media/prolog-scene1.png'), new ig.Image('media/prolog-scene2.png'), new ig.Image('media/prolog-scene3.png'), new ig.Image('media/prolog-scene4.png'), new ig.Image('media/prolog-scene5.png'), new ig.Image('media/prolog-scene6.png'), new ig.Image('media/prolog-scene7.png'), new ig.Image('media/prolog-scene8.png')],
      currentIntroSlide: 0,
      slideIntroTimer: new ig.Timer(),
      slideHowtoplay: new window.FullsizeBackdrop('media/how-to-play.png'),
      slidesLose: [new ig.Image('media/lose1.png'), new ig.Image('media/lose2.png'), new ig.Image('media/lose3.png'), new ig.Image('media/lose4.png'), new window.FullsizeBackdrop('media/lose5.png'), new window.FullsizeBackdrop('media/lose6.png')],
      currentLoseSlide: 0,
      slideLoseTimer: new ig.Timer(),
      loseTimer: new ig.Timer(60 * 2.5),
      init: function() {
        ig.input.bind(ig.KEY.LEFT_ARROW, 'left');
        ig.input.bind(ig.KEY.RIGHT_ARROW, 'right');
        ig.input.bind(ig.KEY.UP_ARROW, 'up');
        ig.input.bind(ig.KEY.DOWN_ARROW, 'down');
        ig.input.bind(ig.KEY.SPACE, 'jump');
        ig.input.bind(ig.KEY.ENTER, 'pause');
        ig.input.bind(ig.KEY.ESC, 'escape');
        window.soundManager.stopAll();
        return window.soundManager.play('intro-bgm');
      },
      startGame: function() {
        var as, currentLevelNum;
        currentLevelNum = 0;
        as = new ig.AnimationSheet('media/tiles.png', 16, 16);
        this.backgroundAnims = {
          'media/tiles.png': {
            26: new ig.Animation(as, 0.2, [26, 26, 27, 26, 26])
          }
        };
        this.nextLevel();
        return this.loseTimer.reset();
      },
      currentLevelNum: 0,
      nextLevel: function() {
        this.currentLevelNum += 1;
        if (this.currentLevelNum === 1) {
          window.soundManager.stopAll();
          window.soundManager.play('plains-bgm');
          this.loadLevel(LevelPlains);
        } else if (this.currentLevelNum === 2) {
          window.soundManager.stopAll();
          window.soundManager.play('villiage-bgm');
          this.loadLevel(LevelVilliage);
        } else if (this.currentLevelNum === 3) {
          window.soundManager.stopAll();
          window.soundManager.play('castle-bgm');
          this.loadLevel(LevelCastle);
        } else {
          window.soundManager.stopAll();
          window.soundManager.play('win-bgm');
          this.loadLevel({});
          this.state = 'win';
        }
        return this.player = ig.game.getEntityByName('player');
      },
      update: function() {
        var colMap, levelHeight, levelWidth;
        if (this.state === 'title') {
          if (ig.input.pressed('jump')) {
            this.state = 'intro';
            this.slideIntroTimer.reset();
          }
        } else if (this.state === 'intro') {
          if (this.slideIntroTimer.delta() < 3) {
            this.currentIntroSlide = 0;
          } else if (this.slideIntroTimer.delta() < 6) {
            this.currentIntroSlide = 1;
          } else if (this.slideIntroTimer.delta() < 9) {
            this.currentIntroSlide = 2;
          } else if (this.slideIntroTimer.delta() < 12) {
            this.currentIntroSlide = 3;
          } else if (this.slideIntroTimer.delta() < 15) {
            this.currentIntroSlide = 4;
          } else if (this.slideIntroTimer.delta() < 18) {
            this.currentIntroSlide = 5;
          } else if (this.slideIntroTimer.delta() < 21) {
            this.currentIntroSlide = 6;
          } else if (this.slideIntroTimer.delta() < 24) {
            this.currentIntroSlide = 7;
          } else if (this.slideIntroTimer.delta() < 27) {
            this.state = 'how-to-play';
          }
          if (ig.input.pressed('escape')) {
            this.state = 'how-to-play';
          }
        } else if (this.state === 'how-to-play') {
          if (ig.input.pressed('jump')) {
            this.state = 'game';
            this.currentLevelNum = 0;
            this.startGame();
          }
        } else if (this.state === 'lose') {
          if (this.slideLoseTimer.delta() < 3) {
            this.currentLoseSlide = 0;
          } else if (this.slideLoseTimer.delta() < 6) {
            this.currentLoseSlide = 1;
          } else if (this.slideLoseTimer.delta() < 9) {
            this.currentLoseSlide = 2;
          } else if (this.slideLoseTimer.delta() < 12) {
            this.currentLoseSlide = 3;
          } else if (this.slideLoseTimer.delta() < 18) {
            this.currentLoseSlide = 4;
          } else if (this.slideLoseTimer.delta() < 24) {
            this.currentLoseSlide = 5;
            if (ig.input.pressed('jump')) {
              this.state = 'how-to-play';
              window.soundManager.stopAll();
              window.soundManager.play('intro-bgm');
            }
          }
          if (ig.input.pressed('escape')) {
            this.state = 'how-to-play';
            window.soundManager.stopAll();
            window.soundManager.play('intro-bgm');
          }
        } else if (this.state === 'win') {
          if (this.slideIntroTimer.delta() > 3) {
            if (ig.input.pressed('jump')) {
              this.state = 'title';
            }
          }
        } else if (this.state === 'game') {
          if (this.player) {
            this.screen.x = this.player.pos.x - ig.system.width / 8 * 3;
            this.screen.y = this.player.pos.y - ig.system.height / 2;
            if (this.screen.x < 0) {
              this.screen.x = 0;
            }
            if (this.screen.y < 0) {
              this.screen.y = 0;
            }
            colMap = ig.game.collisionMap;
            levelWidth = colMap.width * colMap.tilesize;
            levelHeight = colMap.height * colMap.tilesize;
            if (this.screen.x > levelWidth - ig.system.width) {
              this.screen.x = levelWidth - ig.system.width;
            }
            if (this.screen.y > levelHeight - ig.system.height) {
              this.screen.y = levelHeight - ig.system.height;
            }
          }
        }
        return this.parent();
      },
      draw: function() {
        var levelWidth, minutes, ratio, seconds;
        if (this.state === 'title') {
          this.parent();
          this.titleImage.draw(0, 0);
        } else if (this.state === 'intro') {
          this.parent();
          this.slidesIntro[this.currentIntroSlide].draw(0, 0);
        } else if (this.state === 'how-to-play') {
          this.parent();
          this.slideHowtoplay.draw(0, 0);
        } else if (this.state === 'game') {
          levelWidth = ig.game.collisionMap.width * ig.game.collisionMap.tilesize;
          ratio = this.screen.x / (levelWidth - ig.system.width);
          this.farthestBackground.draw(-(this.farthestBackground.width - ig.system.width) * ratio, 0);
          this.farBackground.draw(-(this.farBackground.width - ig.system.width) * ratio, 0);
          this.armies.draw(-this.armies.width + (this.armies.width - this.armies.width * (-this.loseTimer.delta() / (60 * 2.5))), 100);
          this.nearBackground.draw(-(this.nearBackground.width - ig.system.width) * ratio, 0);
          this.parent();
          if (-this.loseTimer.delta() < 0) {
            this.state = 'lose';
            this.loadLevel({});
            this.slideLoseTimer.reset();
            window.soundManager.stopAll();
            window.soundManager.play('lose-bgm');
          } else {
            minutes = Math.floor(-this.loseTimer.delta() / 60.0).toFixed(0);
            seconds = Math.floor(-this.loseTimer.delta() % 60).toFixed(0);
            if (seconds < 10) {
              seconds = '0' + seconds;
            }
            this.font.draw("Armies arrive in: " + minutes + ':' + seconds, 80, 10);
          }
        } else if (this.state === 'lose') {
          this.parent();
          this.slidesLose[this.currentLoseSlide].draw(0, 0);
        }
        if (this.state === 'win') {
          this.parent();
          return this.slideWin.draw(0, 0);
        }
      }
    });
    if (!ig.global.wm) {
      return soundManager.setup({
        url: 'lib/soundmanager/swf/',
        flashVersion: 9,
        useHighPerformance: true,
        debugMode: false,
        waitForWindowLoad: true,
        onready: function() {
          soundManager.createSound({
            multiShot: true,
            autoLoad: true,
            id: 'bell',
            url: 'media/bell.mp3',
            volume: 40
          });
          soundManager.createSound({
            multiShot: true,
            autoLoad: true,
            id: 'dead',
            url: 'media/dead.mp3'
          });
          soundManager.createSound({
            multiShot: true,
            autoLoad: true,
            id: 'falling-from-sky',
            url: 'media/falling-from-sky.mp3',
            volume: 40
          });
          soundManager.createSound({
            multiShot: true,
            autoLoad: true,
            id: 'rolling-ground-hit',
            url: 'media/rolling-ground-hit.mp3'
          });
          soundManager.createSound({
            multiShot: true,
            autoLoad: true,
            id: 'jump',
            url: 'media/wall-jump.mp3',
            volume: 40
          });
          soundManager.createSound({
            multiShot: true,
            autoLoad: true,
            id: 'wall-jump',
            url: 'media/wall-jump.mp3'
          });
          soundManager.createSound({
            volume: 30,
            autoLoad: true,
            loops: 10000,
            id: 'intro-bgm',
            url: 'musics/intro.mp3'
          });
          soundManager.createSound({
            volume: 30,
            autoLoad: true,
            loops: 10000,
            id: 'plains-bgm',
            url: 'musics/plains.mp3'
          });
          soundManager.createSound({
            volume: 30,
            autoLoad: true,
            loops: 10000,
            id: 'villiage-bgm',
            url: 'musics/villiage.mp3'
          });
          soundManager.createSound({
            volume: 30,
            autoLoad: true,
            loops: 10000,
            id: 'castle-bgm',
            url: 'musics/castle.mp3'
          });
          soundManager.createSound({
            volume: 30,
            autoLoad: true,
            loops: 10000,
            id: 'win-bgm',
            url: 'musics/win.mp3'
          });
          soundManager.createSound({
            volume: 30,
            autoLoad: true,
            loops: 10000,
            id: 'lose-bgm',
            url: 'musics/lose.mp3'
          });
          return ig.main('#canvas', window.LD25Game, 60, 256, 240, 2);
        },
        ontimeout: function() {
          alert('Could not start Soundmanager.  Sounds will be disabled.');
          return ig.main('#canvas', window.LD25Game, 60, 256, 240, 2);
        }
      });
    } else {
      return ig.main('#canvas', window.LD25Game, 60, 256, 240, 2);
    }
  });

}).call(this);
